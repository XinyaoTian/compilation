Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> prime
Rule 1     prime -> line
Rule 2     prime -> line prime
Rule 3     line -> statement ;
Rule 4     statement -> IDENTIFIER = expression
Rule 5     statement -> IF condition THEN statement ELSE statement
Rule 6     statement -> IF condition THEN statement
Rule 7     statement -> WHILE condition DO statement
Rule 8     statement -> { prime }
Rule 9     condition -> expression > expression
Rule 10    condition -> expression < expression
Rule 11    condition -> expression = expression
Rule 12    expression -> expression + term
Rule 13    expression -> expression - term
Rule 14    expression -> term
Rule 15    term -> factor
Rule 16    term -> term * factor
Rule 17    term -> term / factor
Rule 18    factor -> ( expression )
Rule 19    factor -> IDENTIFIER
Rule 20    factor -> INT10
Rule 21    factor -> INT8
Rule 22    factor -> INT16
Rule 23    factor -> REAL10
Rule 24    factor -> REAL8
Rule 25    factor -> REAL16

Terminals, with rules where they appear

(                    : 18
)                    : 18
*                    : 16
+                    : 12
-                    : 13
/                    : 17
;                    : 3
<                    : 10
=                    : 4 11
>                    : 9
DO                   : 7
ELSE                 : 5
IDENTIFIER           : 4 19
IF                   : 5 6
INT10                : 20
INT16                : 22
INT8                 : 21
REAL10               : 23
REAL16               : 25
REAL8                : 24
THEN                 : 5 6
WHILE                : 7
error                : 
{                    : 8
}                    : 8

Nonterminals, with rules where they appear

condition            : 5 6 7
expression           : 4 9 9 10 10 11 11 12 13 18
factor               : 15 16 17
line                 : 1 2
prime                : 2 8 0
statement            : 3 5 5 6 7
term                 : 12 13 14 16 17

Parsing method: LALR

state 0

    (0) S' -> . prime
    (1) prime -> . line
    (2) prime -> . line prime
    (3) line -> . statement ;
    (4) statement -> . IDENTIFIER = expression
    (5) statement -> . IF condition THEN statement ELSE statement
    (6) statement -> . IF condition THEN statement
    (7) statement -> . WHILE condition DO statement
    (8) statement -> . { prime }

    IDENTIFIER      shift and go to state 4
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    {               shift and go to state 7

    prime                          shift and go to state 1
    line                           shift and go to state 2
    statement                      shift and go to state 3

state 1

    (0) S' -> prime .



state 2

    (1) prime -> line .
    (2) prime -> line . prime
    (1) prime -> . line
    (2) prime -> . line prime
    (3) line -> . statement ;
    (4) statement -> . IDENTIFIER = expression
    (5) statement -> . IF condition THEN statement ELSE statement
    (6) statement -> . IF condition THEN statement
    (7) statement -> . WHILE condition DO statement
    (8) statement -> . { prime }

    $end            reduce using rule 1 (prime -> line .)
    }               reduce using rule 1 (prime -> line .)
    IDENTIFIER      shift and go to state 4
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    {               shift and go to state 7

    line                           shift and go to state 2
    prime                          shift and go to state 8
    statement                      shift and go to state 3

state 3

    (3) line -> statement . ;

    ;               shift and go to state 9


state 4

    (4) statement -> IDENTIFIER . = expression

    =               shift and go to state 10


state 5

    (5) statement -> IF . condition THEN statement ELSE statement
    (6) statement -> IF . condition THEN statement
    (9) condition -> . expression > expression
    (10) condition -> . expression < expression
    (11) condition -> . expression = expression
    (12) expression -> . expression + term
    (13) expression -> . expression - term
    (14) expression -> . term
    (15) term -> . factor
    (16) term -> . term * factor
    (17) term -> . term / factor
    (18) factor -> . ( expression )
    (19) factor -> . IDENTIFIER
    (20) factor -> . INT10
    (21) factor -> . INT8
    (22) factor -> . INT16
    (23) factor -> . REAL10
    (24) factor -> . REAL8
    (25) factor -> . REAL16

    (               shift and go to state 15
    IDENTIFIER      shift and go to state 16
    INT10           shift and go to state 17
    INT8            shift and go to state 18
    INT16           shift and go to state 19
    REAL10          shift and go to state 20
    REAL8           shift and go to state 21
    REAL16          shift and go to state 22

    condition                      shift and go to state 11
    expression                     shift and go to state 12
    term                           shift and go to state 13
    factor                         shift and go to state 14

state 6

    (7) statement -> WHILE . condition DO statement
    (9) condition -> . expression > expression
    (10) condition -> . expression < expression
    (11) condition -> . expression = expression
    (12) expression -> . expression + term
    (13) expression -> . expression - term
    (14) expression -> . term
    (15) term -> . factor
    (16) term -> . term * factor
    (17) term -> . term / factor
    (18) factor -> . ( expression )
    (19) factor -> . IDENTIFIER
    (20) factor -> . INT10
    (21) factor -> . INT8
    (22) factor -> . INT16
    (23) factor -> . REAL10
    (24) factor -> . REAL8
    (25) factor -> . REAL16

    (               shift and go to state 15
    IDENTIFIER      shift and go to state 16
    INT10           shift and go to state 17
    INT8            shift and go to state 18
    INT16           shift and go to state 19
    REAL10          shift and go to state 20
    REAL8           shift and go to state 21
    REAL16          shift and go to state 22

    condition                      shift and go to state 23
    expression                     shift and go to state 12
    term                           shift and go to state 13
    factor                         shift and go to state 14

state 7

    (8) statement -> { . prime }
    (1) prime -> . line
    (2) prime -> . line prime
    (3) line -> . statement ;
    (4) statement -> . IDENTIFIER = expression
    (5) statement -> . IF condition THEN statement ELSE statement
    (6) statement -> . IF condition THEN statement
    (7) statement -> . WHILE condition DO statement
    (8) statement -> . { prime }

    IDENTIFIER      shift and go to state 4
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    {               shift and go to state 7

    prime                          shift and go to state 24
    line                           shift and go to state 2
    statement                      shift and go to state 3

state 8

    (2) prime -> line prime .

    $end            reduce using rule 2 (prime -> line prime .)
    }               reduce using rule 2 (prime -> line prime .)


state 9

    (3) line -> statement ; .

    IDENTIFIER      reduce using rule 3 (line -> statement ; .)
    IF              reduce using rule 3 (line -> statement ; .)
    WHILE           reduce using rule 3 (line -> statement ; .)
    {               reduce using rule 3 (line -> statement ; .)
    $end            reduce using rule 3 (line -> statement ; .)
    }               reduce using rule 3 (line -> statement ; .)


state 10

    (4) statement -> IDENTIFIER = . expression
    (12) expression -> . expression + term
    (13) expression -> . expression - term
    (14) expression -> . term
    (15) term -> . factor
    (16) term -> . term * factor
    (17) term -> . term / factor
    (18) factor -> . ( expression )
    (19) factor -> . IDENTIFIER
    (20) factor -> . INT10
    (21) factor -> . INT8
    (22) factor -> . INT16
    (23) factor -> . REAL10
    (24) factor -> . REAL8
    (25) factor -> . REAL16

    (               shift and go to state 15
    IDENTIFIER      shift and go to state 16
    INT10           shift and go to state 17
    INT8            shift and go to state 18
    INT16           shift and go to state 19
    REAL10          shift and go to state 20
    REAL8           shift and go to state 21
    REAL16          shift and go to state 22

    expression                     shift and go to state 25
    term                           shift and go to state 13
    factor                         shift and go to state 14

state 11

    (5) statement -> IF condition . THEN statement ELSE statement
    (6) statement -> IF condition . THEN statement

    THEN            shift and go to state 26


state 12

    (9) condition -> expression . > expression
    (10) condition -> expression . < expression
    (11) condition -> expression . = expression
    (12) expression -> expression . + term
    (13) expression -> expression . - term

    >               shift and go to state 27
    <               shift and go to state 28
    =               shift and go to state 29
    +               shift and go to state 30
    -               shift and go to state 31


state 13

    (14) expression -> term .
    (16) term -> term . * factor
    (17) term -> term . / factor

    >               reduce using rule 14 (expression -> term .)
    <               reduce using rule 14 (expression -> term .)
    =               reduce using rule 14 (expression -> term .)
    +               reduce using rule 14 (expression -> term .)
    -               reduce using rule 14 (expression -> term .)
    ;               reduce using rule 14 (expression -> term .)
    ELSE            reduce using rule 14 (expression -> term .)
    )               reduce using rule 14 (expression -> term .)
    THEN            reduce using rule 14 (expression -> term .)
    DO              reduce using rule 14 (expression -> term .)
    *               shift and go to state 32
    /               shift and go to state 33


state 14

    (15) term -> factor .

    *               reduce using rule 15 (term -> factor .)
    /               reduce using rule 15 (term -> factor .)
    >               reduce using rule 15 (term -> factor .)
    <               reduce using rule 15 (term -> factor .)
    =               reduce using rule 15 (term -> factor .)
    +               reduce using rule 15 (term -> factor .)
    -               reduce using rule 15 (term -> factor .)
    ;               reduce using rule 15 (term -> factor .)
    ELSE            reduce using rule 15 (term -> factor .)
    )               reduce using rule 15 (term -> factor .)
    THEN            reduce using rule 15 (term -> factor .)
    DO              reduce using rule 15 (term -> factor .)


state 15

    (18) factor -> ( . expression )
    (12) expression -> . expression + term
    (13) expression -> . expression - term
    (14) expression -> . term
    (15) term -> . factor
    (16) term -> . term * factor
    (17) term -> . term / factor
    (18) factor -> . ( expression )
    (19) factor -> . IDENTIFIER
    (20) factor -> . INT10
    (21) factor -> . INT8
    (22) factor -> . INT16
    (23) factor -> . REAL10
    (24) factor -> . REAL8
    (25) factor -> . REAL16

    (               shift and go to state 15
    IDENTIFIER      shift and go to state 16
    INT10           shift and go to state 17
    INT8            shift and go to state 18
    INT16           shift and go to state 19
    REAL10          shift and go to state 20
    REAL8           shift and go to state 21
    REAL16          shift and go to state 22

    expression                     shift and go to state 34
    term                           shift and go to state 13
    factor                         shift and go to state 14

state 16

    (19) factor -> IDENTIFIER .

    *               reduce using rule 19 (factor -> IDENTIFIER .)
    /               reduce using rule 19 (factor -> IDENTIFIER .)
    >               reduce using rule 19 (factor -> IDENTIFIER .)
    <               reduce using rule 19 (factor -> IDENTIFIER .)
    =               reduce using rule 19 (factor -> IDENTIFIER .)
    +               reduce using rule 19 (factor -> IDENTIFIER .)
    -               reduce using rule 19 (factor -> IDENTIFIER .)
    ;               reduce using rule 19 (factor -> IDENTIFIER .)
    ELSE            reduce using rule 19 (factor -> IDENTIFIER .)
    )               reduce using rule 19 (factor -> IDENTIFIER .)
    THEN            reduce using rule 19 (factor -> IDENTIFIER .)
    DO              reduce using rule 19 (factor -> IDENTIFIER .)


state 17

    (20) factor -> INT10 .

    *               reduce using rule 20 (factor -> INT10 .)
    /               reduce using rule 20 (factor -> INT10 .)
    >               reduce using rule 20 (factor -> INT10 .)
    <               reduce using rule 20 (factor -> INT10 .)
    =               reduce using rule 20 (factor -> INT10 .)
    +               reduce using rule 20 (factor -> INT10 .)
    -               reduce using rule 20 (factor -> INT10 .)
    ;               reduce using rule 20 (factor -> INT10 .)
    ELSE            reduce using rule 20 (factor -> INT10 .)
    )               reduce using rule 20 (factor -> INT10 .)
    THEN            reduce using rule 20 (factor -> INT10 .)
    DO              reduce using rule 20 (factor -> INT10 .)


state 18

    (21) factor -> INT8 .

    *               reduce using rule 21 (factor -> INT8 .)
    /               reduce using rule 21 (factor -> INT8 .)
    >               reduce using rule 21 (factor -> INT8 .)
    <               reduce using rule 21 (factor -> INT8 .)
    =               reduce using rule 21 (factor -> INT8 .)
    +               reduce using rule 21 (factor -> INT8 .)
    -               reduce using rule 21 (factor -> INT8 .)
    ;               reduce using rule 21 (factor -> INT8 .)
    ELSE            reduce using rule 21 (factor -> INT8 .)
    )               reduce using rule 21 (factor -> INT8 .)
    THEN            reduce using rule 21 (factor -> INT8 .)
    DO              reduce using rule 21 (factor -> INT8 .)


state 19

    (22) factor -> INT16 .

    *               reduce using rule 22 (factor -> INT16 .)
    /               reduce using rule 22 (factor -> INT16 .)
    >               reduce using rule 22 (factor -> INT16 .)
    <               reduce using rule 22 (factor -> INT16 .)
    =               reduce using rule 22 (factor -> INT16 .)
    +               reduce using rule 22 (factor -> INT16 .)
    -               reduce using rule 22 (factor -> INT16 .)
    ;               reduce using rule 22 (factor -> INT16 .)
    ELSE            reduce using rule 22 (factor -> INT16 .)
    )               reduce using rule 22 (factor -> INT16 .)
    THEN            reduce using rule 22 (factor -> INT16 .)
    DO              reduce using rule 22 (factor -> INT16 .)


state 20

    (23) factor -> REAL10 .

    *               reduce using rule 23 (factor -> REAL10 .)
    /               reduce using rule 23 (factor -> REAL10 .)
    >               reduce using rule 23 (factor -> REAL10 .)
    <               reduce using rule 23 (factor -> REAL10 .)
    =               reduce using rule 23 (factor -> REAL10 .)
    +               reduce using rule 23 (factor -> REAL10 .)
    -               reduce using rule 23 (factor -> REAL10 .)
    ;               reduce using rule 23 (factor -> REAL10 .)
    ELSE            reduce using rule 23 (factor -> REAL10 .)
    )               reduce using rule 23 (factor -> REAL10 .)
    THEN            reduce using rule 23 (factor -> REAL10 .)
    DO              reduce using rule 23 (factor -> REAL10 .)


state 21

    (24) factor -> REAL8 .

    *               reduce using rule 24 (factor -> REAL8 .)
    /               reduce using rule 24 (factor -> REAL8 .)
    >               reduce using rule 24 (factor -> REAL8 .)
    <               reduce using rule 24 (factor -> REAL8 .)
    =               reduce using rule 24 (factor -> REAL8 .)
    +               reduce using rule 24 (factor -> REAL8 .)
    -               reduce using rule 24 (factor -> REAL8 .)
    ;               reduce using rule 24 (factor -> REAL8 .)
    ELSE            reduce using rule 24 (factor -> REAL8 .)
    )               reduce using rule 24 (factor -> REAL8 .)
    THEN            reduce using rule 24 (factor -> REAL8 .)
    DO              reduce using rule 24 (factor -> REAL8 .)


state 22

    (25) factor -> REAL16 .

    *               reduce using rule 25 (factor -> REAL16 .)
    /               reduce using rule 25 (factor -> REAL16 .)
    >               reduce using rule 25 (factor -> REAL16 .)
    <               reduce using rule 25 (factor -> REAL16 .)
    =               reduce using rule 25 (factor -> REAL16 .)
    +               reduce using rule 25 (factor -> REAL16 .)
    -               reduce using rule 25 (factor -> REAL16 .)
    ;               reduce using rule 25 (factor -> REAL16 .)
    ELSE            reduce using rule 25 (factor -> REAL16 .)
    )               reduce using rule 25 (factor -> REAL16 .)
    THEN            reduce using rule 25 (factor -> REAL16 .)
    DO              reduce using rule 25 (factor -> REAL16 .)


state 23

    (7) statement -> WHILE condition . DO statement

    DO              shift and go to state 35


state 24

    (8) statement -> { prime . }

    }               shift and go to state 36


state 25

    (4) statement -> IDENTIFIER = expression .
    (12) expression -> expression . + term
    (13) expression -> expression . - term

    ;               reduce using rule 4 (statement -> IDENTIFIER = expression .)
    ELSE            reduce using rule 4 (statement -> IDENTIFIER = expression .)
    +               shift and go to state 30
    -               shift and go to state 31


state 26

    (5) statement -> IF condition THEN . statement ELSE statement
    (6) statement -> IF condition THEN . statement
    (4) statement -> . IDENTIFIER = expression
    (5) statement -> . IF condition THEN statement ELSE statement
    (6) statement -> . IF condition THEN statement
    (7) statement -> . WHILE condition DO statement
    (8) statement -> . { prime }

    IDENTIFIER      shift and go to state 4
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    {               shift and go to state 7

    statement                      shift and go to state 37

state 27

    (9) condition -> expression > . expression
    (12) expression -> . expression + term
    (13) expression -> . expression - term
    (14) expression -> . term
    (15) term -> . factor
    (16) term -> . term * factor
    (17) term -> . term / factor
    (18) factor -> . ( expression )
    (19) factor -> . IDENTIFIER
    (20) factor -> . INT10
    (21) factor -> . INT8
    (22) factor -> . INT16
    (23) factor -> . REAL10
    (24) factor -> . REAL8
    (25) factor -> . REAL16

    (               shift and go to state 15
    IDENTIFIER      shift and go to state 16
    INT10           shift and go to state 17
    INT8            shift and go to state 18
    INT16           shift and go to state 19
    REAL10          shift and go to state 20
    REAL8           shift and go to state 21
    REAL16          shift and go to state 22

    expression                     shift and go to state 38
    term                           shift and go to state 13
    factor                         shift and go to state 14

state 28

    (10) condition -> expression < . expression
    (12) expression -> . expression + term
    (13) expression -> . expression - term
    (14) expression -> . term
    (15) term -> . factor
    (16) term -> . term * factor
    (17) term -> . term / factor
    (18) factor -> . ( expression )
    (19) factor -> . IDENTIFIER
    (20) factor -> . INT10
    (21) factor -> . INT8
    (22) factor -> . INT16
    (23) factor -> . REAL10
    (24) factor -> . REAL8
    (25) factor -> . REAL16

    (               shift and go to state 15
    IDENTIFIER      shift and go to state 16
    INT10           shift and go to state 17
    INT8            shift and go to state 18
    INT16           shift and go to state 19
    REAL10          shift and go to state 20
    REAL8           shift and go to state 21
    REAL16          shift and go to state 22

    expression                     shift and go to state 39
    term                           shift and go to state 13
    factor                         shift and go to state 14

state 29

    (11) condition -> expression = . expression
    (12) expression -> . expression + term
    (13) expression -> . expression - term
    (14) expression -> . term
    (15) term -> . factor
    (16) term -> . term * factor
    (17) term -> . term / factor
    (18) factor -> . ( expression )
    (19) factor -> . IDENTIFIER
    (20) factor -> . INT10
    (21) factor -> . INT8
    (22) factor -> . INT16
    (23) factor -> . REAL10
    (24) factor -> . REAL8
    (25) factor -> . REAL16

    (               shift and go to state 15
    IDENTIFIER      shift and go to state 16
    INT10           shift and go to state 17
    INT8            shift and go to state 18
    INT16           shift and go to state 19
    REAL10          shift and go to state 20
    REAL8           shift and go to state 21
    REAL16          shift and go to state 22

    expression                     shift and go to state 40
    term                           shift and go to state 13
    factor                         shift and go to state 14

state 30

    (12) expression -> expression + . term
    (15) term -> . factor
    (16) term -> . term * factor
    (17) term -> . term / factor
    (18) factor -> . ( expression )
    (19) factor -> . IDENTIFIER
    (20) factor -> . INT10
    (21) factor -> . INT8
    (22) factor -> . INT16
    (23) factor -> . REAL10
    (24) factor -> . REAL8
    (25) factor -> . REAL16

    (               shift and go to state 15
    IDENTIFIER      shift and go to state 16
    INT10           shift and go to state 17
    INT8            shift and go to state 18
    INT16           shift and go to state 19
    REAL10          shift and go to state 20
    REAL8           shift and go to state 21
    REAL16          shift and go to state 22

    term                           shift and go to state 41
    factor                         shift and go to state 14

state 31

    (13) expression -> expression - . term
    (15) term -> . factor
    (16) term -> . term * factor
    (17) term -> . term / factor
    (18) factor -> . ( expression )
    (19) factor -> . IDENTIFIER
    (20) factor -> . INT10
    (21) factor -> . INT8
    (22) factor -> . INT16
    (23) factor -> . REAL10
    (24) factor -> . REAL8
    (25) factor -> . REAL16

    (               shift and go to state 15
    IDENTIFIER      shift and go to state 16
    INT10           shift and go to state 17
    INT8            shift and go to state 18
    INT16           shift and go to state 19
    REAL10          shift and go to state 20
    REAL8           shift and go to state 21
    REAL16          shift and go to state 22

    term                           shift and go to state 42
    factor                         shift and go to state 14

state 32

    (16) term -> term * . factor
    (18) factor -> . ( expression )
    (19) factor -> . IDENTIFIER
    (20) factor -> . INT10
    (21) factor -> . INT8
    (22) factor -> . INT16
    (23) factor -> . REAL10
    (24) factor -> . REAL8
    (25) factor -> . REAL16

    (               shift and go to state 15
    IDENTIFIER      shift and go to state 16
    INT10           shift and go to state 17
    INT8            shift and go to state 18
    INT16           shift and go to state 19
    REAL10          shift and go to state 20
    REAL8           shift and go to state 21
    REAL16          shift and go to state 22

    factor                         shift and go to state 43

state 33

    (17) term -> term / . factor
    (18) factor -> . ( expression )
    (19) factor -> . IDENTIFIER
    (20) factor -> . INT10
    (21) factor -> . INT8
    (22) factor -> . INT16
    (23) factor -> . REAL10
    (24) factor -> . REAL8
    (25) factor -> . REAL16

    (               shift and go to state 15
    IDENTIFIER      shift and go to state 16
    INT10           shift and go to state 17
    INT8            shift and go to state 18
    INT16           shift and go to state 19
    REAL10          shift and go to state 20
    REAL8           shift and go to state 21
    REAL16          shift and go to state 22

    factor                         shift and go to state 44

state 34

    (18) factor -> ( expression . )
    (12) expression -> expression . + term
    (13) expression -> expression . - term

    )               shift and go to state 45
    +               shift and go to state 30
    -               shift and go to state 31


state 35

    (7) statement -> WHILE condition DO . statement
    (4) statement -> . IDENTIFIER = expression
    (5) statement -> . IF condition THEN statement ELSE statement
    (6) statement -> . IF condition THEN statement
    (7) statement -> . WHILE condition DO statement
    (8) statement -> . { prime }

    IDENTIFIER      shift and go to state 4
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    {               shift and go to state 7

    statement                      shift and go to state 46

state 36

    (8) statement -> { prime } .

    ;               reduce using rule 8 (statement -> { prime } .)
    ELSE            reduce using rule 8 (statement -> { prime } .)


state 37

    (5) statement -> IF condition THEN statement . ELSE statement
    (6) statement -> IF condition THEN statement .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 47
    ;               reduce using rule 6 (statement -> IF condition THEN statement .)

  ! ELSE            [ reduce using rule 6 (statement -> IF condition THEN statement .) ]


state 38

    (9) condition -> expression > expression .
    (12) expression -> expression . + term
    (13) expression -> expression . - term

    THEN            reduce using rule 9 (condition -> expression > expression .)
    DO              reduce using rule 9 (condition -> expression > expression .)
    +               shift and go to state 30
    -               shift and go to state 31


state 39

    (10) condition -> expression < expression .
    (12) expression -> expression . + term
    (13) expression -> expression . - term

    THEN            reduce using rule 10 (condition -> expression < expression .)
    DO              reduce using rule 10 (condition -> expression < expression .)
    +               shift and go to state 30
    -               shift and go to state 31


state 40

    (11) condition -> expression = expression .
    (12) expression -> expression . + term
    (13) expression -> expression . - term

    THEN            reduce using rule 11 (condition -> expression = expression .)
    DO              reduce using rule 11 (condition -> expression = expression .)
    +               shift and go to state 30
    -               shift and go to state 31


state 41

    (12) expression -> expression + term .
    (16) term -> term . * factor
    (17) term -> term . / factor

    >               reduce using rule 12 (expression -> expression + term .)
    <               reduce using rule 12 (expression -> expression + term .)
    =               reduce using rule 12 (expression -> expression + term .)
    +               reduce using rule 12 (expression -> expression + term .)
    -               reduce using rule 12 (expression -> expression + term .)
    ;               reduce using rule 12 (expression -> expression + term .)
    ELSE            reduce using rule 12 (expression -> expression + term .)
    )               reduce using rule 12 (expression -> expression + term .)
    THEN            reduce using rule 12 (expression -> expression + term .)
    DO              reduce using rule 12 (expression -> expression + term .)
    *               shift and go to state 32
    /               shift and go to state 33


state 42

    (13) expression -> expression - term .
    (16) term -> term . * factor
    (17) term -> term . / factor

    >               reduce using rule 13 (expression -> expression - term .)
    <               reduce using rule 13 (expression -> expression - term .)
    =               reduce using rule 13 (expression -> expression - term .)
    +               reduce using rule 13 (expression -> expression - term .)
    -               reduce using rule 13 (expression -> expression - term .)
    ;               reduce using rule 13 (expression -> expression - term .)
    ELSE            reduce using rule 13 (expression -> expression - term .)
    )               reduce using rule 13 (expression -> expression - term .)
    THEN            reduce using rule 13 (expression -> expression - term .)
    DO              reduce using rule 13 (expression -> expression - term .)
    *               shift and go to state 32
    /               shift and go to state 33


state 43

    (16) term -> term * factor .

    *               reduce using rule 16 (term -> term * factor .)
    /               reduce using rule 16 (term -> term * factor .)
    >               reduce using rule 16 (term -> term * factor .)
    <               reduce using rule 16 (term -> term * factor .)
    =               reduce using rule 16 (term -> term * factor .)
    +               reduce using rule 16 (term -> term * factor .)
    -               reduce using rule 16 (term -> term * factor .)
    ;               reduce using rule 16 (term -> term * factor .)
    ELSE            reduce using rule 16 (term -> term * factor .)
    )               reduce using rule 16 (term -> term * factor .)
    THEN            reduce using rule 16 (term -> term * factor .)
    DO              reduce using rule 16 (term -> term * factor .)


state 44

    (17) term -> term / factor .

    *               reduce using rule 17 (term -> term / factor .)
    /               reduce using rule 17 (term -> term / factor .)
    >               reduce using rule 17 (term -> term / factor .)
    <               reduce using rule 17 (term -> term / factor .)
    =               reduce using rule 17 (term -> term / factor .)
    +               reduce using rule 17 (term -> term / factor .)
    -               reduce using rule 17 (term -> term / factor .)
    ;               reduce using rule 17 (term -> term / factor .)
    ELSE            reduce using rule 17 (term -> term / factor .)
    )               reduce using rule 17 (term -> term / factor .)
    THEN            reduce using rule 17 (term -> term / factor .)
    DO              reduce using rule 17 (term -> term / factor .)


state 45

    (18) factor -> ( expression ) .

    *               reduce using rule 18 (factor -> ( expression ) .)
    /               reduce using rule 18 (factor -> ( expression ) .)
    >               reduce using rule 18 (factor -> ( expression ) .)
    <               reduce using rule 18 (factor -> ( expression ) .)
    =               reduce using rule 18 (factor -> ( expression ) .)
    +               reduce using rule 18 (factor -> ( expression ) .)
    -               reduce using rule 18 (factor -> ( expression ) .)
    ;               reduce using rule 18 (factor -> ( expression ) .)
    ELSE            reduce using rule 18 (factor -> ( expression ) .)
    )               reduce using rule 18 (factor -> ( expression ) .)
    THEN            reduce using rule 18 (factor -> ( expression ) .)
    DO              reduce using rule 18 (factor -> ( expression ) .)


state 46

    (7) statement -> WHILE condition DO statement .

    ;               reduce using rule 7 (statement -> WHILE condition DO statement .)
    ELSE            reduce using rule 7 (statement -> WHILE condition DO statement .)


state 47

    (5) statement -> IF condition THEN statement ELSE . statement
    (4) statement -> . IDENTIFIER = expression
    (5) statement -> . IF condition THEN statement ELSE statement
    (6) statement -> . IF condition THEN statement
    (7) statement -> . WHILE condition DO statement
    (8) statement -> . { prime }

    IDENTIFIER      shift and go to state 4
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    {               shift and go to state 7

    statement                      shift and go to state 48

state 48

    (5) statement -> IF condition THEN statement ELSE statement .

    ;               reduce using rule 5 (statement -> IF condition THEN statement ELSE statement .)
    ELSE            reduce using rule 5 (statement -> IF condition THEN statement ELSE statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 37 resolved as shift
